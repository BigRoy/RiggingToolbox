/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


object ComputeNormalsDeformer : BaseDeformer {
	Scalar hardAngleRadians;
};

function String[] ComputeNormalsDeformer.getUtilizedAttributes(){
	String result[];
	result.push('positions');
	result.push('normals');
	return result;
}

function String[] ComputeNormalsDeformer.getModifiedAttributes(){
	String result[];
	result.push('positions');
	return result;
}

function ComputeNormalsDeformer.bind!(Geometry geometries[]){

}


/// Per-geometry computation of the push. 
/// \internal
operator ComputeNormalsDeformer_deformGeometries<<<index>>>(
  io Geometry geometries[],
  Scalar hardAngleRadians
){
	PolygonMesh mesh = geometries[index];
	mesh.recomputePointNormalsIfRequired( hardAngleRadians );
	return true;
}

function ComputeNormalsDeformer.evaluate(EvalContext context, io Geometry geometries[]){
  ComputeNormalsDeformer_deformGeometries<<<geometries.size()>>>(geometries, this.hardAngleRadians);
}


