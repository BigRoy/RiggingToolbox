/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require FabricStatistics;

//////////////////////////////////////
// Factory definition.

object PolygonMeshPlaneGeneratorFactory : GeometryOperatorFactory {
};

function GeometryOperator PolygonMeshPlaneGeneratorFactory.constructGeometryOperator(){
  PolygonMeshPlaneGenerator geomOp();
  return geomOp;
}


//////////////////////////////////////
//

object PolygonMeshPlaneGenerator : BaseGenerator {
  Scalar length;
  Scalar width;
  UInt32 lengthSections;
  UInt32 widthSections;
  Boolean normals;
  Boolean uvs;

  Boolean enableCaching;// Used to debug the caching system.
};

function PolygonMeshPlaneGenerator(){
  this.enableCaching = true;
}

function String[] PolygonMeshPlaneGenerator.getModifiedAttributes(){
  String result[];
  result.push('positions');
  if(this.normals)
    result.push('normals');
  if(this.uvs)
    result.push('uvs');
  return result;
}

function Boolean PolygonMeshPlaneGenerator.cacheResults(){
  return this.enableCaching;
}

function PolygonMeshPlaneGenerator.evaluate(EvalContext context, io GeometrySet geomSet){
  PolygonMesh mesh();
  mesh.addPlane(Xfo(), this.length, this.width, this.lengthSections, this.widthSections, this.normals, this.uvs);
  geomSet.resize(1);
  geomSet.set(0, mesh);
}


