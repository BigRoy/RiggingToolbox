/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


object GeometryCache : CachePoint {
  Boolean valid;
  BaseGeometry cachedGeometries[];
  UInt32 topologyVersions[];
};

function GeometryCache() {
}

function GeometryCache.invalidate!() {
  this.valid = false;
}

function Boolean GeometryCache.isValid() {
  return this.valid;
}

function GeometryCache.init!(Geometry geometries[]) {
  report("GeometryCache.init");
  this.cachedGeometries.resize(geometries.size);
  this.topologyVersions.resize(geometries.size);
  for(Integer i=0; i<geometries.size; i++){
    // Note: we need clone and 'getVersion' to be part of the Geometry interface. 
    PolygonMesh mesh = geometries[i];
    BaseGeometry baseGeom = null;
    if(mesh)
      baseGeom = mesh;
    else{
      Lines lines = geometries[i];
      if(lines)
        baseGeom = lines;
      else{
        Points points = geometries[i];
        if(points)
          baseGeom = lines;
      }
    }
    this.cachedGeometries[i] = baseGeom.clone();
    this.topologyVersions[i] = baseGeom.version;
  }
  this.valid = true;
}

/// Restores the entire geometry to the state found in the cache.
function GeometryCache.restore(io Geometry geometries[]){
  report("GeometryCache.restore:" + this.cachedGeometries.size);
  geometries.resize(this.cachedGeometries.size);
  for(Integer i=0; i<geometries.size; i++){

    PolygonMesh mesh = geometries[i];
    if(mesh){
      if(mesh.version != this.topologyVersions[i]){
        // Reset the geometry and its topology to the state when the cache point was created.
        PolygonMesh src = this.cachedGeometries[i];
        if(src)
          mesh.copy(src);
      }
    }
    else{
      Lines lines = geometries[i];
      if(lines){
        if(lines.version != this.topologyVersions[i]){
          // Reset the geometry and its topology to the state when the cache point was created.
          Lines src = this.cachedGeometries[i];
          if(src)
            lines.copy(src);
        }
      }
      else{
        Points points = geometries[i];
        if(points){
          if(points.version != this.topologyVersions[i]){
            // Reset the geometry and its topology to the state when the cache point was created.
            Points src = this.cachedGeometries[i];
            if(src)
              points.copy(src);
          }
        }
      }
    }
  }
}


function GeometryCache.update!(io Geometry geometries[]) {
  if(this.valid)
    this.init(geometries);
  else
    this.restore(geometries);
}

