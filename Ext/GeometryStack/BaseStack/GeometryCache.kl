/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


object GeometryCache : CachePoint {
  // Temp: Used in debugging and unit testing.
  Boolean disabled;
  Boolean valid;
  Geometry cachedGeometries[];
  UInt32 topologyVersions[];
};

function GeometryCache() {
}

function GeometryCache.disable!() {
  this.disabled = true;
}

function GeometryCache.enable!() {
  this.disabled = false;
}


function GeometryCache.invalidate!() {
  this.valid = false;
}

function Boolean GeometryCache.isValid() {
  return this.valid;
}

function GeometryCache.init!(Geometry geometries[]) {
  if(this.disabled)
    return;
  report("GeometryCache.init");
  this.cachedGeometries.resize(geometries.size);
  this.topologyVersions.resize(geometries.size);
  for(Integer i=0; i<geometries.size; i++){
    this.cachedGeometries[i] = cloneGeom(geometries[i]);
    this.topologyVersions[i] = getGeomVersion(geometries[i]);
  }
  this.valid = true;
}

/// Restores the entire geometry to the state found in the cache.
function GeometryCache.restore(io Geometry geometries[]){
  if(this.disabled)
    return;
  report("GeometryCache.restore:" + this.cachedGeometries.size);
  geometries.resize(this.cachedGeometries.size);
  for(Integer i=0; i<geometries.size; i++){
    copyFrom(geometries[i], this.cachedGeometries[i]);
  }
}


function GeometryCache.update!(io Geometry geometries[]) {
  if(this.valid)
    this.init(geometries);
  else
    this.restore(geometries);
}

