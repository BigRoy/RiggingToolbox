/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require FabricStatistics;


object GeometryCache : CachePoint {
  // Temp: Used in debugging and unit testing.
  Boolean disabled;
  Boolean valid;
  Geometry cachedGeometries[];
  UInt32 topologyVersions[];
};

function GeometryCache() {
}

function GeometryCache.disable!() {
  this.disabled = true;
}

function GeometryCache.enable!() {
  this.disabled = false;
}


function GeometryCache.invalidate!() {
  this.valid = false;
}

function Boolean GeometryCache.isValid() {
  return this.valid;
}

function GeometryCache.init!(GeometrySet geomSet) {
  if(this.disabled)
    return;
  AutoProfilingEvent p(FUNC);
  this.cachedGeometries.resize(geomSet.size);
  this.topologyVersions.resize(geomSet.size);
  for(Integer i=0; i<geomSet.size; i++){
    this.cachedGeometries[i] = cloneGeom(geomSet.get(i));
    this.topologyVersions[i] = getGeomVersion(geomSet.get(i));
  }
  this.valid = true;
}

/// Restores the entire geometry to the state found in the cache.
function GeometryCache.restore(io GeometrySet geomSet){
  if(this.disabled)
    return;
  AutoProfilingEvent p(FUNC);
  geomSet.resize(this.cachedGeometries.size);
  for(Integer i=0; i<geomSet.size; i++){
    copyFrom(geomSet.get(i), this.cachedGeometries[i]);
  }
}


function GeometryCache.update!(io GeometrySet geomSet) {
  if(this.valid)
    this.init(geomSet);
  else
    this.restore(geomSet);
}

