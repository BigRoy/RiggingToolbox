/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


function ThreadsafeMetaDataContainer cloneMetadata(ThreadsafeMetaDataContainer metaData) {
  // Note: we need clone to be part of the Geometry interface. 
  ThreadsafeMetaDataContainer newmetaData();
  for(key, obj in metaData.dict){
    if(obj.type == PolygonMeshTopology_computeTangentsTopologyWorkingData_Object)
      continue;
    if(obj.type == PolygonMeshTopology_computeTangentsWorkingData_Object)
      continue;
    newmetaData.dict[key] = obj.clone();
  }
  
  return newmetaData;
}

function Geometry cloneGeom(Geometry geometry) {
  // Note: we need clone to be part of the Geometry interface. 
  // Meta data should be cloned with the geometry.
  PolygonMesh mesh = geometry;
  if(mesh){
    PolygonMesh newmesh();
    newmesh.copy(mesh);
    newmesh.metaData = cloneMetadata(mesh.metaData);
    return newmesh;
  }
  else{
    Lines lines = geometry;
    if(lines){
      Lines newlines();
      newlines.copy(lines);
      newlines.metaData = cloneMetadata(lines.metaData);
      return newlines;
    }
    else{
      Points points = geometry;
      if(points){
        Points newpoints();
        newpoints.copy(points);
        newpoints.metaData = cloneMetadata(points.metaData);
        return newpoints;
      }
    }
  }
  setError("Invalid Geometry type:" + geometry.type());
  return null;
}


function copyFrom(io Geometry geometry, Geometry srcGeometry) {
  // Note: we need copyFromGeometry to be part of the Geometry interface. 
  PolygonMesh mesh = geometry;
  if(mesh){
    PolygonMesh src = srcGeometry;
    if(src)
      mesh.copy(src);
  }
  else{
    Lines lines = geometry;
    if(lines){
      Lines src = srcGeometry;
      if(src)
        lines.copy(src);
    }
    else{
      Points points = geometry;
      if(points){
        Points src = srcGeometry;
        if(src)
          points.copy(src);
      }
      else{
        setError("Invalid Geometry type:" + geometry.type());
      }
    }
  }
}

function UInt32 getGeomVersion(Geometry geometry) {
  // Note: we need 'getVersion' to be part of the Geometry interface. 
  PolygonMesh mesh = geometry;
  if(mesh)
    return mesh.version;
  else{
    Lines lines = geometry;
    if(lines)
      return lines.version;
    else{
      Points points = geometry;
      if(points)
        return points.version;
    }
  }
  setError("Invalid Geometry type:" + geometry.type());
  return -1;
}




function ThreadsafeMetaDataContainer getGeomMetaData(Geometry geometry) {
  // Note: we need 'getMetaData' to be part of the Geometry interface. 
  PolygonMesh mesh = geometry;
  if(mesh)
    return mesh.metaData;
  else{
    Lines lines = geometry;
    if(lines)
      return lines.metaData;
    else{
      Points points = geometry;
      if(points)
        return points.metaData;
    }
  }
  setError("Invalid Geometry type:" + geometry.type());
  return null;
}



function String getGeomDebugName(Geometry geometry) {
  // Note: we need 'getVersion' to be part of the Geometry interface. 
  PolygonMesh mesh = geometry;
  if(mesh)
    return mesh.debugName;
  else{
    Lines lines = geometry;
    if(lines)
      return lines.debugName;
    else{
      Points points = geometry;
      if(points)
        return points.debugName;
    }
  }
  setError("Invalid Geometry type:" + geometry.type());
  return "<none>";
}



function GeometryAttribute cloneAttribute(GeometryAttribute attr) {
  // Note: we need clone to be part of the Geometry interface. 
  Ref<Object> src = attr;
  switch(attr.type()){
    case ColorAttribute:{
      ColorAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case IntegerAttribute:{
      IntegerAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Mat33Attribute:{
      Mat33Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Mat44Attribute:{
      Mat44Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case QuatAttribute:{
      QuatAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case RGBAAttribute:{
      RGBAAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case RGBAttribute:{
      RGBAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case RGBAttribute:{
      RGBAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case ScalarAttribute:{
      ScalarAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case ScalarConstantArrayAttribute:{
      ScalarConstantArrayAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case SkinningAttribute:{
      SkinningAttribute colorAttr = attr;
      SkinningAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case UInt16ConstantArrayAttribute:{
      UInt16ConstantArrayAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case UInt32Attribute:{
      UInt32Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Vec2Attribute:{
      Vec2Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Vec3_dAttribute:{
      Vec3_dAttribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Vec3Attribute:{
      Vec3Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
    case Vec4Attribute:{
      Vec4Attribute clone();
      clone.resize(attr.size());
      clone.copyFrom(src);
      return clone;
    }
  }
  setError("Invalid Attribute type:" + attr.type());
  return null;
}


function Boolean applyNameFilter(String name, String filter){
  UInt32 result[];
  String filterStr = filter;
  Boolean wildCardStart = filter.startsWith("*");
  Boolean wildCardEnd = filter.endsWith("*");
  if(wildCardStart){
    filterStr = filterStr.subString(1, -1);
  }
  if(wildCardEnd){
    filterStr = filterStr.subString(0, filterStr.length()-2);
  }
  if(wildCardStart && name.endsWith(filterStr)){
    return true;
  }
  else if(wildCardEnd && name.startsWith(filterStr)){
    return true;
  }
  else if(name == filterStr){
    return true;
  }
  return false;
}



function Boolean applyNameFilters(String name, String filters[]){
  for(Integer i=0; i<filters.size; i++){
    if(applyNameFilter(name, filters[i])){
      return true;
    }
  }
  return false;
}


// simple(hacky) utility function for accessing the value of an environment variable.
function String getEnvVar(String name){
  String key = '${'+name+'}';
  FilePath temp = FilePath('/'+key+'/').expandEnvVars();
  String vals[] = temp.string().split('/');
  if(vals.size == 2)
    return '';
  // If the var was not found, then the middle values is still the key.
  if(vals[1] == key)
    return '';
  return vals[1];
}
