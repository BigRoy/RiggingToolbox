/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;

struct BlendShapesModifier_Target {
  UInt32 indices[];
  Vec3 deltas[];
};

/// The Blend Shapes modifier stores a sparce data set of offsets. 
object BlendShapesModifier : BaseModifier {
  Vec3 referencePositions[][];
  BlendShapesModifier_Target targets[][];
  Scalar threshold;
};


function BlendShapesModifier(){
  this.threshold = 0.001;
}



//////////////////////////////////////
//

/// A struct for collecting points during surface painting.
/// \internal
struct BlendShapesModifier_collectGeomPointsSharedData {
  Vec3 positions[];
  Vec3 refpositions[];
  Scalar threshold;
};


/// A struct for collecting points during surface painting.
/// \internal
struct BlendShapesModifier_collectMeshPointsSharedData {
  PolygonMesh mesh;
  Vec3 refpositions[];
  Scalar threshold;
};

/// A struct for collecting points during surface painting.
/// \internal
struct BlendShapesModifier_CollectPointsMapOutput {
  Boolean collected;
  Integer index;
  Vec3 delta;
};


/// An operator for collecting points during surface painting.
/// \internal
operator blendShapesModifier_collectGeomPointsProduce(
  io BlendShapesModifier_CollectPointsMapOutput result,
  Index index,
  Size count,
  BlendShapesModifier_collectGeomPointsSharedData sharedData
) {
  Vec3 pos = sharedData.positions[index];
  Vec3 delta = pos - sharedData.refpositions[index];
  if(delta.length() < sharedData.threshold){
    result.collected = true;
    result.index = index;
    result.delta = delta;
  }
}

/// An operator for collecting points during surface painting.
/// \internal
operator blendShapesModifier_collectMeshPointsProduce(
  io BlendShapesModifier_CollectPointsMapOutput result,
  Index index,
  Size count,
  BlendShapesModifier_collectMeshPointsSharedData sharedData
) {
  Vec3 pos = sharedData.mesh.getPointPosition(index);
  Vec3 delta = pos - sharedData.refpositions[index];
  if(delta.length() < sharedData.threshold){
    result.collected = true;
    result.index = index;
    result.delta = delta;
  }
}


/// An operator for collecting points during surface painting.
/// \internal
operator blendShapesModifier_collectPointsReduce(
  BlendShapesModifier_CollectPointsMapOutput input,
  io BlendShapesModifier_Target output,
  Index index,
  Size count
) {
  if(input.collected){
    output.indices.push(input.index);
    output.deltas.push(input.delta);
  }
}

// First add a reference geometry, followed by a collection of targets. 
// As the targets are added we generate our sparce blend targets based on the reference.
// This step must happen before evaluation. 
function BlendShapesModifier.addReference!(Geometry refGeometry){
  UInt32 numGeoms = this.targets.size()+1;
  this.targets.resize(numGeoms);
  this.referencePositions.resize(numGeoms);
}

function BlendShapesModifier.addTarget!(UInt32 geomIndex, Geometry targetGeometry){
  UInt32 numTargets = this.targets[geomIndex].size()+1;
  UInt32 targetIndex = numTargets-1;
  this.targets[geomIndex].resize(numTargets);
  this.referencePositions[geomIndex].resize(numTargets);

  PolygonMesh targetMesh = targetGeometry;
  if(!targetMesh){

    Ref<GeometryAttributes> attributes = targetGeometry.getAttributes();
    Vec3Attribute positionsAttribute = attributes.positionsAttribute;

    BlendShapesModifier_collectGeomPointsSharedData sharedData;
    sharedData.positions = positionsAttribute.values;
    sharedData.refpositions = this.referencePositions[geomIndex];
    sharedData.threshold = this.threshold;

    ValueProducer<BlendShapesModifier_Target> reducer = createReduce( 
      createArrayGenerator(
        createConstValue( attributes.size() ),
        blendShapesModifier_collectGeomPointsProduce,
        createConstValue( sharedData )
      ),
      blendShapesModifier_collectPointsReduce
    );
    this.targets[geomIndex][targetIndex] = reducer.produce();
  }
  else{
    BlendShapesModifier_collectMeshPointsSharedData sharedData;
    sharedData.mesh = targetMesh;
    sharedData.refpositions = this.referencePositions[geomIndex];
    sharedData.threshold = this.threshold;

    ValueProducer<BlendShapesModifier_Target> reducer = createReduce( 
      createArrayGenerator(
        createConstValue( targetMesh.pointCount() ),
        blendShapesModifier_collectMeshPointsProduce,
        createConstValue( sharedData )
      ),
      blendShapesModifier_collectPointsReduce
    );
    this.targets[geomIndex][targetIndex] = reducer.produce();
  }
}


operator BlendShapesModifier_applyGeomDeltas<<<index>>>(
  io Vec3 positions[],
  BlendShapesModifier_Target target
){
  positions[target.indices[index]] += target.deltas[index];
}

operator BlendShapesModifier_applyMeshDeltas<<<index>>>(
  io PolygonMesh mesh,
  BlendShapesModifier_Target target,
){
  Vec3 pos = mesh.getPointPosition(target.indices[index]);
  mesh.setPointPosition(Size(target.indices[index]), pos + target.deltas[index]);
}


operator blendShapesModifier_deformGeometries<<<index>>>(
  io GeometrySet geomSet,
  BlendShapesModifier_Target targets[][]
){
  Geometry geom = geomSet.get(index);
  Ref<GeometryAttributes> attributes = geom.getAttributes();
  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  
  PolygonMesh mesh = geom;
  for(UInt32 i=0; i<targets[index].size; i++){
    if(!mesh){
      BlendShapesModifier_applyGeomDeltas<<<attributes.size()>>>(
        positionsAttribute.values,
        targets[index][i]
      );
    }
    else{
      BlendShapesModifier_applyMeshDeltas<<<mesh.pointCount()>>>(
        mesh,
        targets[index][i]
      );
    }
  }
  positionsAttribute.incrementVersion();
}

function BlendShapesModifier.evaluate(EvalContext context, io GeometrySet geomSet){
  blendShapesModifier_deformGeometries<<<geomSet.size()>>>(geomSet, this.targets);
}


function BlendShapesModifier.save(){
  
}

function BlendShapesModifier.load(){
  
}
