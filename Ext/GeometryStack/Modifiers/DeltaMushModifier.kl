/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;


//////////////////////////////////////
// Factory definition.

object DeltaMushModifierFactory : GeometryOperatorFactory {
};

function GeometryOperator DeltaMushModifierFactory.constructGeometryOperator(){
  DeltaMushModifier geomOp();
  return geomOp;
}


//////////////////////////////////////
//


object DeltaMushModifier : BaseModifier {
  Vec3 deltas[][];

  UInt32 iterations;
  Boolean bound;
  UInt32 boundVersion;

  Boolean displayDebugging;
  Lines debugLines[];
  DrawingHandle handle;
};


function DeltaMushModifier(){
  this.iterations = 20;
}



function UInt32[String] DeltaMushModifier.getAttributeInteractions(){
  UInt32 result[String];
  result['positions'] = AttrMode_ReadWrite;
  return result;
}

function DeltaMushModifier.setNumIterations!(UInt32 iterations){
  if(this.iterations != iterations){
    this.iterations = iterations;
    this.bound = false;
    String data;
    this.notify('changed', data);
  }
}


function DeltaMushModifier.setDisplayDebugging!(Boolean displayDebugging){
  if(this.displayDebugging != displayDebugging){
    this.displayDebugging = displayDebugging;
    String data;
    this.notify('changed', data);
  }
}



function Mat44 deltaMushModifier_buildRefFrame(PolygonMesh mesh, UInt32 index, Vec3 positionValues[]){

  Mat44 m;
  Vec3 p1 = positionValues[index];

  LocalL16UInt32Array surroundingPoints;
  mesh.getPointSurroundingPoints( index, false, surroundingPoints );
  UInt32 nbNei = surroundingPoints.size();
  if( nbNei == 0 ) 
    return m;
  Vec3 p2 = positionValues[surroundingPoints.get(0)];
  Vec3 p3 = positionValues[surroundingPoints.get(1)];

  Vec3 dir = p2 - p1;
  Vec3 nrm = dir.cross(p3 - p1);
  Quat q;
  q.setFromDirectionAndUpvector(dir, nrm);
  m.set(p1, q.toMat33(), Vec3(1,1,1));
  return m;
}


struct SmoothPosMRInput {
  PolygonMesh mesh;
  Vec3 positions[];
};

operator deltaMushModifier_smoothPos<<<index>>>(io Vec3 positions[], io PolygonMesh mesh) {

  //Pseudo-gaussian: center weight = 0.5, neighbor weights sum = 0.5
  Vec3 position = positions[ index ];

  LocalL16UInt32Array surroundingPoints;
  mesh.getPointSurroundingPoints( index, false, surroundingPoints );
  UInt32 nbNei = surroundingPoints.size();
  if( nbNei ) {
    Vec3 neiSum = Vec3(0,0,0);
    for( UInt32 i = 0; i < nbNei; ++i ) {
      UInt32 neiPt = surroundingPoints.get(i);
      neiSum += positions[neiPt];
    }
    neiSum /= Scalar(nbNei);
    mesh.setPointPosition( Size(index), ( position + neiSum ) * 0.5 );
  }
}

// operator deltaMushModifier_smoothPosNorm<<<index>>>(io Vec3 positions[], io Vec3 normals[], io PolygonMesh mesh) {
//   //Pseudo-gaussian: center weight = 0.5, neighbor weights sum = 0.5
//   Vec3 position = positions[ index ];
//   Vec3 normal = normals[ index ];

//   LocalL16UInt32Array surroundingPoints;
//   mesh.getPointSurroundingPoints( index, false, surroundingPoints );
//   UInt32 nbNei = surroundingPoints.size();
//   if( nbNei ) {
//     Vec3 neiPosSum = Vec3(0,0,0);
//     Vec3 neiNormSum = Vec3(0,0,0);
//     for( UInt32 i = 0; i < nbNei; ++i ) {
//       UInt32 neiPt = surroundingPoints.get(i);
//       neiPosSum += positions[neiPt];
//       neiNormSum += normals[neiPt];
//     }
//     neiPosSum /= Scalar(nbNei);
//     mesh.setPointPosition( index, ( position + neiPosSum ) * 0.5 );
//     normal += neiNormSum;
//     normal.setUnit();
//     mesh.setPointNormal( index, normal );
//   }
// }


operator deltaMushModifier_computeBinding<<<index>>>(
  io PolygonMesh mesh,
  Vec3 initialPositions[],
  io Vec3 deltas[]
){
  // Build a reference frame. 
  Mat44 mat44 = deltaMushModifier_buildRefFrame(mesh, index, mesh.positionsAttribute.values);

  // Compute the delta between the relaxed frame and the original position.
  deltas[index] = mat44.inverse() * initialPositions[index];
}

operator deltaMushModifier_applyDeltas<<<index>>>(
  io PolygonMesh mesh,
  Vec3 positionsClone[],
  Vec3 deltas[],
  Boolean displayDebugging,
  io Lines debugLines
){
  Mat44 mat44 = deltaMushModifier_buildRefFrame(mesh, index, positionsClone);

  Vec3 newPos = mat44 * deltas[index];
  mesh.setPointPosition( index, newPos );

  if(displayDebugging){
    debugLines.indices[(index*2)] = (index*2);
    debugLines.indices[(index*2)+1] = (index*2)+1;
    debugLines.setPosition((index*2), positionsClone[index]);
    debugLines.setPosition((index*2)+1, newPos);
  }
}


operator deltaMushModifier_deformGeometries<<<index>>>(
  io GeometrySet geomSet,
  io Vec3 deltas[][],
  UInt32 iterations,
  Boolean bound,
  Boolean displayDebugging,
  io Lines debugLines[]
){
  PolygonMesh mesh = geomSet.get(0);
  if(!mesh){
    report("Warning in DeltaMushModifier: geometry is not a polygon mesh:" + getGeomDebugName(mesh));
    return;
  }

  if(displayDebugging){
    if(debugLines[index] == null)
      debugLines[index] = Lines();
    if(debugLines[index].lineCount() != mesh.pointCount()){
      debugLines[index].attributes.resize( mesh.pointCount() * 2 );
      debugLines[index].indices.resize( mesh.pointCount() * 2 );
      debugLines[index].incrementVersion();
    }
    // Always increment the positoins version as they will be re-geomuted in the following kernel.
    debugLines[index].incrementPositionsVersion();
  }

  if(!bound){
    // Cache the initial positions of the points before relaxing.
    Vec3 initialPositions[] = mesh.positionsAttribute.values.clone();

    for(UInt32 i=0; i<iterations; i++){
      // relax the mesh, causing it to lose volume.
      deltaMushModifier_smoothPos<<<mesh.pointCount()>>>(mesh.positionsAttribute.values, mesh);
    }

    deltas[index].resize(mesh.pointCount());
    // compute the deltas between the relaxed mesh, and the original vertex positions.
    deltaMushModifier_computeBinding<<<mesh.pointCount()>>>(
      mesh,
      initialPositions,
      deltas[index]
    );
  }
  else{
    for(UInt32 i=0; i<iterations; i++){
      // relax the mesh, causing it to lose volume.
      deltaMushModifier_smoothPos<<<mesh.pointCount()>>>(mesh.positionsAttribute.values, mesh);
    }
  }

  // Re-apply the deltas to re-inflate the mesh.
  // (Even when binding, the mesh is deflated, so it must be re-inflated)
  Vec3 positionsClone[] = mesh.positionsAttribute.values.clone();
  deltaMushModifier_applyDeltas<<<mesh.pointCount()>>>(
    mesh,
    positionsClone,
    deltas[index],
    displayDebugging,
    debugLines[index]
  );
  mesh.incrementPointPositionsVersion();

}

function DeltaMushModifier.evaluate!(EvalContext context, io GeometrySet geomSet){
  AutoProfilingEvent p(FUNC);
  
  // by adding the iterations to the version, simply changing iterations causes the binding to be invalidated.
  if(geomSet.getVersion()+this.iterations != this.boundVersion){
    this.bound = false;
    this.deltas.resize(geomSet.size());
    if(this.displayDebugging)
      this.debugLines.resize(geomSet.size());
  }
  if( this.iterations > 0)
    deltaMushModifier_deformGeometries<<<geomSet.size()>>>(geomSet, this.deltas, this.iterations, this.bound, this.displayDebugging, this.debugLines);

  if(!this.bound){
    this.boundVersion = geomSet.getVersion()+this.iterations;
    this.bound = true;
  }

  if(this.displayDebugging && this.handle==null)
    this.setupRendering();
  else if((!this.displayDebugging && this.handle!=null) || this.iterations == 0)
    this.handle = null;
}

function DeltaMushModifier.setupRendering!(){

  // Construct a handle for this character instance. The handle will clean up the InlineDrawing when it is destroyed. 
  this.handle = DrawingHandle("DeltaMushModifierHandle");

  // Now setup the rendering
  InlineShader shader = this.handle.getDrawing().registerShader(OGLFlatOverlayShader());
  InlineMaterial material = shader.getOrCreateMaterial("DeltaMushModifierMaterial");

  for(Integer geomId=0; geomId<this.debugLines.size(); geomId++){
    String name = "DeltaMushModifier_" + String(geomId);
    InlineShape shape = InlineLinesShape(name, this.debugLines[geomId]);
    InlineInstance instance = SimpleInlineInstance(name + "_Instance", this.handle.rootTransform, shape, material);
    instance.setInstanceUniform(InlineUniform('u_color', Color(1.0,0.0,0.0)));
  }
}

function JSONDictValue DeltaMushModifier.saveJSON(PersistenceContext persistenceContext){
  JSONDictValue json = this.parent#saveJSON(persistenceContext);
  json.setInteger('iterations', this.iterations);
  json.setBoolean('displayDebugging', this.displayDebugging);
  return json;
}

function DeltaMushModifier.loadJSON!(PersistenceContext persistenceContext, JSONDictValue json){
  this.parent#loadJSON(persistenceContext, json);
  if(json.has('iterations'))
    this.iterations = json.getInteger('iterations');
  if(json.has('displayDebugging'))
    this.displayDebugging = json.getBoolean('displayDebugging');
}


