/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require Manipulation;


//////////////////////////////////////
// Factory definition.

object WeightmapModifierFactory : GeometryOperatorFactory {
};

function GeometryOperator WeightmapModifierFactory.constructGeometryOperator(){
  WeightmapModifier geomOp();
  return geomOp;
}


//////////////////////////////////////
//


object WeightmapModifier : BaseModifier {
  Weightmap weightmaps[];
  String weightmapName;
};


function UInt32[String] WeightmapModifier.getAttributeDependencies(){
  UInt32 result[String];
  result['positions'] = AttrDependency_In;
  result[this.weightmapName] = AttrDependency_Out;
  return result;
}

/// Return true if the generation of the geometries is expensive and the results should be cached.
function Boolean WeightmapModifier.cacheResults(){
  // Teh weightmap does not need to bac cached 
  return false;
}


/// Per-geometry computation of the push. 
/// \internal
operator weightmapModifier_connectWeightmaps<<<index>>>(
  io GeometrySet geomSet,
  io Weightmap weightmaps[],
  String weightmapName
){
  PolygonMesh mesh = geomSet.get(index);
  if(mesh != null && !weightmaps[index]){
    weightmaps[index] = Weightmap();
    weightmaps[index].setName(weightmapName);
    weightmaps[index].connect(mesh, Xfo());
  }
}


function WeightmapModifier.evaluate(EvalContext context, io GeometrySet geomSet){
  AutoProfilingEvent p(FUNC);
  
  Ref<WeightmapModifier> io_this = this;
  weightmapModifier_connectWeightmaps<<<geomSet.size()>>>(geomSet, io_this.weightmaps, this.weightmapName);
}


