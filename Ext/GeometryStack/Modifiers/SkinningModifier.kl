/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require FabricStatistics;


//////////////////////////////////////
// Factory definition.

object SkinningModifierFactory : GeometryOperatorFactory {
};

function GeometryOperator SkinningModifierFactory.constructGeometryOperator(){
  SkinningModifier geomOp();
  return geomOp;
}


//////////////////////////////////////
//


object SkinningModifier : BaseModifier {

  UInt32 dataVersion;
  Boolean poseDirty;
  Mat44 pose[];
  Mat44 invReferencePose[];
  Mat44 skinningMatrices[];
  Mat44 bindShapeTransforms[];

  Boolean transformNormals;
};

function SkinningModifier(){
  this.transformNormals = false;
}

function String[] SkinningModifier.getRequiredAttributes(){
  String result[];
  result.push('positions');
  if(this.transformNormals)
    result.push('normals');
  result.push('skinningData');
  return result;
}

function String[] SkinningModifier.getModifiedAttributes(){
  String result[];
  result.push('positions');
  if(this.transformNormals)
    result.push('normals');
  return result;
}

function SkinningModifier.setReferencePose!(Mat44 referencePose[]){
  this.invReferencePose.resize(referencePose.size);
  for (Integer i = 0; i < referencePose.size; i++)
    this.invReferencePose[i] = referencePose[i].inverse();
  this.skinningMatrices.resize(referencePose.size);
}

function SkinningModifier.setReferencePoseFromSkeleton!(Skeleton skeleton){
  Size deformerIndices[] = skeleton.getDeformerIndices();
  Mat44 referencePose[];
  referencePose.resize(deformerIndices.size);
  for (Integer i = 0; i < deformerIndices.size; i++)
    referencePose[i] = skeleton.getBone(deformerIndices[i]).referencePose.toMat44();
  this.setReferencePose(referencePose);
}

function SkinningModifier.setPose!(Mat44 pose[]){
  this.pose = pose;
  this.poseDirty = true;
  String data;
  this.notify('changed', data);
}

/// The per-point operator that computes the linear blend skinning. 
/// \internal
operator skinningModifier_skinPositions<<<index>>>(
  io Vec3 positions[],
  SkinningAttribute skinningAttr,
  Mat44 skinningMatrices[]
){
  Vec3 srcPos = positions[index];

  LocalL16UInt32Array indices;
  LocalL16ScalarArray weights;
  skinningAttr.getPairs(index, indices, weights);

  Vec3 position(0,0,0);
  for( UInt32 i = 0; i < indices.size(); ++i ) {
    Scalar boneWeight = weights.get(i);
    if( boneWeight == 0.0 )
      break;
    UInt32 boneId = indices.get(i);
    position += (skinningMatrices[boneId] * srcPos) * boneWeight;
  }

  positions[index] = position;
}

/// The per-point operator that computes the linear blend skinning. 
/// \internal
operator skinningModifier_skinPositionsAndNormals<<<index>>>(
  io Vec3 positions[],
  io Vec3 normals[],
  SkinningAttribute skinningAttr,
  Mat44 skinningPosAndNormMatrices[]
){
  Vec3 srcPos = positions[index];
  Vec3 srcNorm = normals[index];
  Vec3 position(0,0,0);
  Vec3 normal(0,0,0);

  LocalL16UInt32Array indices;
  LocalL16ScalarArray weights;
  skinningAttr.getPairs(index, indices, weights);
  
  for( UInt32 i = 0; i < indices.size(); ++i ) {
    Scalar boneWeight = weights.get(i);
    if( boneWeight == 0.0 )
      break;
    UInt32 boneId = indices.get(i);
    position += (skinningPosAndNormMatrices[boneId*2] * srcPos) * boneWeight;
    normal += (skinningPosAndNormMatrices[boneId*2+1] * srcNorm) * boneWeight;
  }
  Scalar length = normal.length();//Don't call setUnit to avoid runtime error reports..
  if( length > 0.0001 )
    normal *= 1.0 / length;

  positions[index] = position;
  normals[index] = normal;
}

/// Computes the deformation of the character using linear blend skinning. 
/// \internal
operator skinningModifier_deformGeometries_skinPositions<<<index>>>(
  io GeometrySet geomSet,
  Mat44 skinningMatrices[]
){
  Ref<GeometryAttributes> attributes = geomSet.get(index).getAttributes();

  if(!attributes.has("skinningData")){
    setError("ERROR: Geometry does not have skinningData");
    return;
  }
  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  SkinningAttribute skinningAttr = attributes.getAttribute("skinningData");

  skinningModifier_skinPositions<<<attributes.size()>>>(
    positionsAttribute.values,
    skinningAttr,
    skinningMatrices
  );
  positionsAttribute.incrementVersion();
}

/// Computes the deformation of the character using linear blend skinning. 
/// \internal
operator skinningModifier_deformGeometries_skinPositionsAndNormals<<<index>>>(
  io GeometrySet geomSet,
  Mat44 skinningPosAndNormMatrices[]
){
  Ref<GeometryAttributes> attributes = geomSet.get(index).getAttributes();

  if(!attributes.has("skinningData")){
    setError("ERROR: Geometry does not have skinningData");
    return;
  }
  if(!attributes.has("normals")){
    setError("ERROR: Geometry does not have normals");
    return;
  }
  
  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  Vec3Attribute normalsAttribute = attributes.normalsAttribute;
  SkinningAttribute skinningAttr = attributes.getAttribute("skinningData");

  skinningModifier_skinPositionsAndNormals<<<attributes.size()>>>(
    positionsAttribute.values,
    normalsAttribute.values,
    skinningAttr,
    skinningPosAndNormMatrices
  );
  positionsAttribute.incrementVersion();
  normalsAttribute.incrementVersion();
}

function SkinningModifier.evaluate(EvalContext context, io GeometrySet geomSet){
  AutoProfilingEvent p(FUNC);

  if(this.dataVersion != geomSet.getVersion()){
    // create an io this pointer so we can cache the values. 
    Ref<SkinningModifier> io_this = this;
    io_this.bindShapeTransforms.resize(geomSet.size);
    for(Integer i=0; i<geomSet.size; i++){
      Geometry geometry = geomSet.get(i);
      Ref<GeometryAttributes> attributes = geometry.getAttributes();
      if(!attributes.has("skinningData")){
        setError("ERROR: Geometry does not have skinningData:" + getGeomDebugName(geometry));
        return;
      }
      ThreadsafeMetaDataContainer metaData = getGeomMetaData(geometry);
      GenericMat44Value bindShapeTransform = metaData.get('bindShapeTransform');
      if(bindShapeTransform){
        io_this.bindShapeTransforms[i] = bindShapeTransform.value;
      }
    }
    if(geomSet.hasMetaData('skeleton')){
      Skeleton skeleton = geomSet.getMetaData('skeleton');
      if(skeleton)
        io_this.setReferencePoseFromSkeleton(skeleton);
      else
        throw("No skeleton found in geometry set");
    }
    io_this.dataVersion = geomSet.getVersion();
  }

  if(this.poseDirty != geomSet.getVersion()){
    Ref<SkinningModifier> io_this = this;
    if(this.pose.size != this.invReferencePose.size){
      setError('Pose count does not match the reference pose count referencePose:' + this.invReferencePose.size + " != " + this.pose.size);
      return;
    }
    for (Integer i = 0; i < this.pose.size; i++) {
      io_this.skinningMatrices[i] = this.pose[i] * this.invReferencePose[i];
    }
    io_this.poseDirty = false;
  }


  if(this.transformNormals){
    Mat44 skinningPosAndNormMatrices[];
    skinningPosAndNormMatrices.resize( this.skinningMatrices.size()*2 );
    for( UInt32 i = 0; i < this.skinningMatrices.size(); ++i ) {
      skinningPosAndNormMatrices[i*2] = this.skinningMatrices[i];// * this.bindShapeTransforms[i];
      skinningPosAndNormMatrices[i*2 + 1] = skinningPosAndNormMatrices[i*2];
      skinningPosAndNormMatrices[i*2 + 1].zeroTranslation();
    }
    skinningModifier_deformGeometries_skinPositionsAndNormals<<<geomSet.size()>>>(geomSet, skinningPosAndNormMatrices);
  }
  else{
    skinningModifier_deformGeometries_skinPositions<<<geomSet.size()>>>(geomSet, this.skinningMatrices);
  }
}

