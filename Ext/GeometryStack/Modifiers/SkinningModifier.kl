/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require FabricStatistics;


//////////////////////////////////////
// Factory definition.

object SkinningModifierFactory : GeometryOperatorFactory {
};

function GeometryOperator SkinningModifierFactory.constructGeometryOperator(){
  SkinningModifier geomOp();
  return geomOp;
}


//////////////////////////////////////
//


object SkinningModifier : BaseModifier {
  /// toggle the transformation of normals. 
  /// If the subsequent deformer would cause the normals to be invalidated(BlendShapes)
  /// then there is no value in transforming the normals. 
  Boolean transformNormals;

  UInt32 dataVersion;
  Boolean poseDirty;
  Mat44 pose[];
  Mat44 invReferencePose[];
  Mat44 skinningMatrices[];
  Mat44 bindShapeTransforms[];

  // Data extracted from the SkinningAttribute into flat arrays 
  // so that we can easily move them to the GPU. 
  Float32 weights[][];
  UInt32 indices[][];
  UInt32 offsets[][];
  Boolean buffersLoaded;
};

function SkinningModifier(){
  this.transformNormals = false;
  this.poseDirty = true;
}


function UInt32[String] SkinningModifier.getAttributeInteractions(){
  UInt32 result[String];
  result['positions'] = AttrMode_ReadWrite;
  if(this.transformNormals)
    result['normals'] = AttrMode_ReadWrite;
  result['skinningData'] = AttrMode_Read;
  return result;
}

function SkinningModifier.setReferencePose!(Mat44 referencePose[]){
  this.invReferencePose.resize(referencePose.size);
  for (Integer i = 0; i < referencePose.size; i++)
    this.invReferencePose[i] = referencePose[i].inverse();
  this.skinningMatrices.resize(referencePose.size);
}

function SkinningModifier.setReferencePoseFromSkeleton!(Skeleton skeleton){
  Size deformerIndices[] = skeleton.getDeformerIndices();
  Mat44 referencePose[];
  referencePose.resize(deformerIndices.size);
  for (Integer i = 0; i < deformerIndices.size; i++)
    referencePose[i] = skeleton.getBone(deformerIndices[i]).referencePose.toMat44();
  this.setReferencePose(referencePose);
}

function SkinningModifier.setPose!(Mat44 pose[]){
  this.pose = pose;
  this.poseDirty = true;
  String data;
  this.notify('changed', data);
}

function SkinningModifier.extractSkinningDataToArrays!(PolygonMesh mesh, UInt32 geomIndex){
  if(geomIndex <= this.weights.size)
    this.weights.resize(geomIndex+1);
  if(geomIndex <= this.indices.size)
    this.indices.resize(geomIndex+1);
  if(geomIndex <= this.offsets.size)
    this.offsets.resize(geomIndex+1);

  Ref<GeometryAttributes> attributes = mesh.getAttributes();
  if(!attributes.has("skinningData")){
    setError("ERROR: Geometry does not have skinningData");
    return;
  }
  SkinningAttribute skinningAttr = attributes.getAttribute("skinningData");

  this.weights[geomIndex].resize(0);
  this.indices[geomIndex].resize(0);
  this.offsets[geomIndex].resize(0);

  UInt32 offset = 0;
  for(UInt32 i=0; i<mesh.pointCount(); i++){
    LocalL16UInt32Array indices;
    LocalL16ScalarArray weights;
    skinningAttr.getPairs(index, indices, weights);
    this.offsets.push(offset);
    for(UInt32 j=0; j<indices.size(); j++){
      this.indices[geomIndex].push(indices.get(j));
      this.weights[geomIndex].push(weights.get(j));
      offset++;
    }
  }
}

/// The per-point operator that computes the linear blend skinning. 
/// \internal
operator skinningModifier_skinPositions<<<index>>>(
  io PolygonMesh mesh,
  SkinningAttribute skinningAttr,
  Mat44 skinningMatrices[]
){
  Vec3 srcPos = mesh.getPointPosition( index );

  LocalL16UInt32Array indices;
  LocalL16ScalarArray weights;
  skinningAttr.getPairs(index, indices, weights);
  Scalar weighSum = 0.0;
  Vec3 position(0,0,0);
  for( UInt32 i = 0; i < indices.size(); ++i ) {
    Scalar boneWeight = weights.get(i);
    if( boneWeight == 0.0 )
      break;
    UInt32 boneId = indices.get(i);
    position += (skinningMatrices[boneId] * srcPos) * boneWeight;
    // report("skinPositions:" + index+":"+ i+":" + boneWeight);
    weighSum += boneWeight;
  }

  // report("srcPos:" + srcPos + ":" + index+":"+ position+":"+ weighSum);
  // positions[index] = position;
  mesh.setPointPosition( index, position );
}

/// The per-point operator that computes the linear blend skinning. 
/// \internal
operator skinningModifier_skinPositionsAndNormals<<<index>>>(
  io Vec3 positions[],
  io Vec3 normals[],
  SkinningAttribute skinningAttr,
  Mat44 skinningPosAndNormMatrices[]
){
  Vec3 srcPos = positions[index];
  Vec3 srcNorm = normals[index];
  Vec3 position(0,0,0);
  Vec3 normal(0,0,0);

  LocalL16UInt32Array indices;
  LocalL16ScalarArray weights;
  skinningAttr.getPairs(index, indices, weights);
  
  for( UInt32 i = 0; i < indices.size(); ++i ) {
    Scalar boneWeight = weights.get(i);
    if( boneWeight == 0.0 )
      break;
    UInt32 boneId = indices.get(i);
    position += (skinningPosAndNormMatrices[boneId*2] * srcPos) * boneWeight;
    normal += (skinningPosAndNormMatrices[boneId*2+1] * srcNorm) * boneWeight;
  }
  Scalar length = normal.length();//Don't call setUnit to avoid runtime error reports..
  if( length > 0.0001 )
    normal *= 1.0 / length;

  positions[index] = position;
  normals[index] = normal;
}

/// Computes the deformation of the character using linear blend skinning. 
/// \internal
operator skinningModifier_deformGeometries_skinPositions<<<index>>>(
  io GeometrySet geomSet,
  Mat44 skinningMatrices[],
  Mat44 bindShapeTransforms[]
){
  PolygonMesh mesh = geomSet.get(index);
  if(!mesh){
    setError("ERROR: Geometry is not a mesh");
    return;
  }

  Ref<GeometryAttributes> attributes = mesh.getAttributes();
  if(!attributes.has("skinningData")){
    setError("ERROR: Geometry does not have skinningData");
    return;
  }

  Mat44 skinninMatricesWithBindOffset[];
  skinninMatricesWithBindOffset.resize( skinningMatrices.size() );
  for( UInt32 i = 0; i < skinningMatrices.size(); ++i ) {
    skinninMatricesWithBindOffset[i] = skinningMatrices[i] * bindShapeTransforms[index];
  }

  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  SkinningAttribute skinningAttr = attributes.getAttribute("skinningData");

  skinningModifier_skinPositions<<<mesh.pointCount()>>>(
    mesh,
    skinningAttr,
    skinninMatricesWithBindOffset
  );
  positionsAttribute.incrementVersion();
}

/// Computes the deformation of the character using linear blend skinning. 
/// \internal
operator skinningModifier_deformGeometries_skinPositionsAndNormals<<<index>>>(
  io GeometrySet geomSet,
  Mat44 skinningMatrices[],
  Mat44 bindShapeTransforms[]
){
  Ref<GeometryAttributes> attributes = geomSet.get(index).getAttributes();

  if(!attributes.has("skinningData")){
    setError("ERROR: Geometry does not have skinningData");
    return;
  }
  if(!attributes.has("normals")){
    setError("ERROR: Geometry does not have normals");
    return;
  }

  Mat44 skinningPosAndNormMatrices[];
  skinningPosAndNormMatrices.resize( skinningMatrices.size()*2 );
  for( UInt32 i = 0; i < skinningMatrices.size(); ++i ) {
    skinningPosAndNormMatrices[i*2] = skinningMatrices[i] * bindShapeTransforms[i];
    skinningPosAndNormMatrices[i*2 + 1] = skinningPosAndNormMatrices[i*2];
    skinningPosAndNormMatrices[i*2 + 1].zeroTranslation();
  }
  
  Vec3Attribute positionsAttribute = attributes.positionsAttribute;
  Vec3Attribute normalsAttribute = attributes.normalsAttribute;
  SkinningAttribute skinningAttr = attributes.getAttribute("skinningData");

  // skinningModifier_skinPositionsAndNormals<<<attributes.size()>>>(
  //   positionsAttribute.values,
  //   normalsAttribute.values,
  //   skinningAttr,
  //   skinningPosAndNormMatrices
  // );
  positionsAttribute.incrementVersion();
  normalsAttribute.incrementVersion();
}

function SkinningModifier.loadToGPU!( ) {
  this.weights.convertToGPU();
  this.indices.convertToGPU();
  this.offsets.convertToGPU();
}

function SkinningModifier.evaluate!(EvalContext context, io GeometrySet geomSet){
  AutoProfilingEvent p(FUNC);

  if(this.dataVersion != geomSet.getVersion()){
    this.bindShapeTransforms.resize(geomSet.size);
    for(Integer i=0; i<geomSet.size; i++){
      Geometry geometry = geomSet.get(i);
      Ref<GeometryAttributes> attributes = geometry.getAttributes();
      if(!attributes.has("skinningData")){
        setError("ERROR: Geometry does not have skinningData:" + getGeomDebugName(geometry));
        return;
      }
      ThreadsafeMetaDataContainer metaData = getGeomMetaData(geometry);
      GenericMat44Value bindShapeTransform = metaData.get('bindShapeTransform');
      if(bindShapeTransform){
        this.bindShapeTransforms[i] = bindShapeTransform.value;
      }

      PolygonMesh mesh = geometry;
      if(mesh)
        this.extractSkinningDataToArrays( mesh, i );
    }
    if(geomSet.hasMetaData('skeleton')){
      Skeleton skeleton = geomSet.getMetaData('skeleton');
      if(skeleton)
        this.setReferencePoseFromSkeleton(skeleton);
      else
        throw("No skeleton found in geometry set");
    }
    this.dataVersion = geomSet.getVersion();
  }

  if(this.poseDirty){
    Ref<SkinningModifier> this = this;
    if(this.pose.size != this.invReferencePose.size){
      report('Warning: Pose count does not match the reference pose count. referencePose:' + this.invReferencePose.size + " != pose:" + this.pose.size + ". Skinning disabled");
      return;
    }
    for (Integer i = 0; i < this.pose.size; i++) {
      this.skinningMatrices[i] = this.pose[i] * this.invReferencePose[i];
    }
    this.poseDirty = false;
  }

  Boolean useGPU = false;
  if(useGPU){
    if(!this.buffersLoaded){
      this.loadToGPU();
      this.buffersLoaded = true;
    }
  }


  if(this.transformNormals){
    skinningModifier_deformGeometries_skinPositionsAndNormals<<<geomSet.size()>>>(geomSet, this.skinningMatrices, this.bindShapeTransforms);
  }
  else{
    skinningModifier_deformGeometries_skinPositions<<<geomSet.size()>>>(geomSet, this.skinningMatrices, this.bindShapeTransforms);
  }
}


function JSONDictValue SkinningModifier.saveJSON(PersistenceContext persistenceContext){
  JSONDictValue json = this.parent#saveJSON(persistenceContext);
  json.setBoolean('transformNormals', this.transformNormals);
  return json;
}

function SkinningModifier.loadJSON!(PersistenceContext persistenceContext, JSONDictValue json){
  this.parent#loadJSON(persistenceContext, json);
  if(json.has('transformNormals'))
    this.transformNormals = json.getBoolean('transformNormals');
}


