
/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;

interface Generator {
  Boolean cacheResults();
};

object BaseGenerator : Notifier, Generator, GeometryOperator {

};

function BaseGenerator(){

}

function String[] BaseGenerator.getRequiredAttributes(){
  // Generators should never require attributes to exist. 
  String result[];
  return result;
}

function String[] BaseGenerator.getModifiedAttributes(){
  String result[];
  result.push('positions');
  return result;
}


/// Return true if the generation of the geometries is expensive and the results should be cached.
function Boolean BaseGenerator.cacheResults(){
  return true;
}

function BaseGenerator.evaluate(EvalContext context, io GeometrySet geomSet){

}

function JSONDictValue BaseGenerator.saveJSON(PersistenceContext persistenceContext){
  JSONDictValue json();

  json.setString("type", String(this.type()));

  return json;
}

function BaseGenerator.loadJSON!(PersistenceContext persistenceContext, JSONDictValue json){
  
}


/// Generates a Description string of this pose.
/// \param indent The indentation to use when generating the string. 
function String BaseGenerator.getDesc(String indent) {
  String desc;
  desc += indent + "{\n";
  desc += indent + "  type: "+ this.type() + "\n";
  desc += indent + "}";
  return desc;
}
