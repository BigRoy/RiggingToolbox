/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;
require FabricStatistics;

// pre-declaring the regsitry because it is loaded last in the fpm file. 
object RiggingToolboxRegistry;

object GeometryStack : Notifier, Listener {
  String name;
  String filePath;

  GeometrySet geomSet;
  GeometryOperator geomOperators[];
  CachePoint cachePoints[];
  UInt32 dirtyPoint;

  Boolean displayGeometries;
  DrawingHandle handle;
  Boolean renderingInitialized;
  UInt32 geomSetVersion;

  // e.g. If a deformer modifies positions, and the subsequent deformer
  // ultilizes normals, and there is a dependeny from normals to positions
  // then normals have to be automatically recomputed before the next deformer is run. 
  String implicitDependencies[String][];
};

function GeometryStack() {
  this.init();
}


function GeometryStack.init!() {
  this.geomSet = GeometrySet();
  this.addAttributeDependency('normals', 'positions');
  this.addAttributeDependency('tangents', 'positions');
  this.addAttributeDependency('tangents', 'normals');
  this.displayGeometries = true;
}

function GeometryStack.addAttributeDependency!(String from, String to) {
  if(!this.implicitDependencies.has(from)){
    String emptyArray[];
    this.implicitDependencies[from] = emptyArray;
  }
  this.implicitDependencies[from].push(to);
}

function GeometryStack.addGeometryOperator!(GeometryOperator op) {
  this.geomOperators.push(op);
  this.cachePoints.resize(this.geomOperators.size);

  // Note: the 'in' arg becomes 'io' here.
  Notifier notifier = op;
  if(notifier)
    notifier.addListener(this);
}

function GeometryOperator GeometryStack.getGeometryOperator(UInt32 index) {
  return this.geomOperators[index];
}

function UInt32 GeometryStack.numGeometryOperators() {
  return this.geomOperators.size;
}


function GeometryStack.disableCachePoint!(UInt32 index) {
  if(this.cachePoints[index] != null)
    this.cachePoints[index].disable();
}

function GeometryStack.enableCachePoint!(UInt32 index) {
  if(this.cachePoints[index] != null)
    this.cachePoints[index].enable();
}

function GeometryStack.notify!(Notifier notifier, String type, String data) {
  AutoProfilingEvent p(FUNC+":" + notifier.type() + "." +type);
  switch(type){
  case 'changed':
    for(Integer i=0; i<this.geomOperators.size; i++){
      Notifier op = this.geomOperators[i];
      if(op === notifier){
        if(i < this.dirtyPoint)
          this.dirtyPoint = i;
        // for(Integer j=i; j<this.geomOperators.size; j++){
        //   if(this.cachePoints[j] != null)
        //     this.cachePoints[j].invalidate();
        // }
        break;
      }
    }
    // Emit a notification that other object might recieve. 
    // e.g. A Wrap deformer would recieve this notication and dirty it's stack. 
    this.notify('changed', data);
    break;
  }
}

// Pull-model evaluation. Evaluation can be recursive when multiple stacks are used in conjunction.
// e.g. 
//  [ LoadAlembic, SkinningModifier ]
//                                  |
//             [ LoadAlembic, WrapModifier ] ->
function GeometrySet GeometryStack.evaluate!(EvalContext context) {
  AutoProfilingEvent p(FUNC);

  // this.dirtyPoint = 0;// force evlauation all the time.
  if(this.dirtyPoint < this.geomOperators.size){
    for(Integer i=this.dirtyPoint; i<this.geomOperators.size; i++){
      GeometryOperator op = this.geomOperators[i];

      // Now check the geometries if they have the attributes required by the next operation.
      Boolean debug = true;
      if(debug){
        UInt32 deps[String] = op.getAttributeInteractions();
        for(Integer k=0; k<this.geomSet.size; k++){
          String missingAttributes[];
          for(key, value in deps){
            if(value == AttrMode_Read || value == AttrMode_ReadWrite){
              Ref<GeometryAttributes> attributes = this.geomSet.get(k).getAttributes();
              if(!attributes.has(key))
                missingAttributes.push(key);
            }
          }
          if(missingAttributes.size > 0){
            setError("Cannot evaluate '" + op.type() + "'. Geometry missing required attributes:" + missingAttributes);
            return this.geomSet;
          }
        }
      }
      
      CachePoint cachePoint = this.cachePoints[i];
      if(cachePoint == null){
        Generator generator = op;
        if(generator)
          cachePoint = GeometryCache();
        else
          cachePoint = GeometryAttributeCache();
        this.cachePoints[i] = cachePoint;
      }
      if(this.dirtyPoint < i){
        cachePoint.update(this.geomSet, op);
      }
      else{
        cachePoint.restore(this.geomSet);
      }
      op.evaluate(context, this.geomSet);
    }
    this.dirtyPoint = this.geomOperators.size;
  }

  if(this.displayGeometries && (this.handle==null || this.geomSetVersion != this.geomSet.getVersion()))
    this.setupRendering();
  else if(!this.displayGeometries && this.handle!=null)
    this.handle = null;

  if(this.geomSetVersion != this.geomSet.getVersion()){
    this.setupRendering();
    this.geomSetVersion = this.geomSet.getVersion();
  }


  return this.geomSet;
}

function GeometryStack.setupRendering!(){

  // Construct a handle for this character instance. The handle will clean up the InlineDrawing when it is destroyed. 
  this.handle = DrawingHandle(this.name+"Handle");

  // Now setup the rendering
  InlineShader shader = this.handle.getDrawing().registerShader(OGLSurfaceShader());
  InlineMaterial material = shader.getOrCreateMaterial(this.name+"Material");

  for(Integer geomId=0; geomId<this.geomSet.size(); geomId++){
    Geometry geom = this.geomSet.get(geomId);
    String name = this.name + "_" + getGeomDebugName(geom);
    InlineShape shape = null;
    PolygonMesh mesh = geom;
    if(mesh)
      shape = InlineMeshShape(name, mesh);
    else{
      Lines lines = geom;
      if(lines)
        shape = InlineLinesShape(name, lines);
      else{
        Points points = geom;
        if(points)
          shape = InlinePointsShape(name, points);
        else{
          report("Warning in GeometryStack.setupRendering: unsupported geometry type:" + geom.type());
          continue;
        }
      }
    }
    InlineInstance instance = SimpleInlineInstance(name + "_Instance", this.handle.rootTransform, shape, material);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', Color(0.0,0.0,1.0)));
  }
}



function JSONDictValue GeometryStack.saveJSON(PersistenceContext persistenceContext){
  JSONDictValue json();
  JSONArrayValue geomOperatorsData();
  for(UInt32 i=0; i<this.geomOperators.size; i++){
    geomOperatorsData.add(this.geomOperators[i].saveJSON(persistenceContext));
  }
  json.set("geomOperators", geomOperatorsData);
  json.setBoolean('displayGeometries', this.displayGeometries);
  return json;
}

function GeometryStack.loadJSON!(PersistenceContext persistenceContext, JSONDictValue json){
  RiggingToolboxRegistry registry = getRiggingToolboxRegistry();
  JSONArrayValue geomOperatorsData = json.get("geomOperators");
  if(!geomOperatorsData)
    throw("Invalid json :" + json);
  for(UInt32 i=0; i<geomOperatorsData.size; i++){
    JSONDictValue geomOperatorData = geomOperatorsData.get(i);
    String type = geomOperatorData.getString("type");
    GeometryOperator geomOp = registry.constructGeometryOperator(type);
    geomOp.loadJSON(persistenceContext, geomOperatorData);
    this.addGeometryOperator(geomOp);
  }
  if(json.has('displayGeometries'))
    this.displayGeometries = json.getBoolean('displayGeometries');
}


function GeometryStack.loadJSONString!(PersistenceContext persistenceContext, String jsonString){
  JSONDoc doc();
  doc.parse(jsonString);
  this.loadJSON(persistenceContext, doc.root);
}


function GeometryStack.loadJSONFile!(PersistenceContext persistenceContext, String filePath){
  FilePath expandedPath = FilePath(filePath).expandEnvVars();
  if(expandedPath.isRelative())
    expandedPath = FilePath(persistenceContext.filePath) / expandedPath;

  if(!expandedPath.exists()){
    throw("File not found:" + expandedPath.string());
  }
  this.filePath = filePath;
  String expandedPathStr = expandedPath.string();

  PersistenceContext subpersistenceContext;
  expandedPath.removeFileName();
  subpersistenceContext.filePath = expandedPath.string();
  TextReader reader(expandedPathStr);
  this.loadJSONString(subpersistenceContext, reader.readAll());
}

function GeometryStack.loadJSONFile!(String filePath){
  PersistenceContext persistenceContext;
  this.loadJSONFile( persistenceContext, filePath);
}

function String GeometryStack.getFilePath(){
  return this.filePath;
}



/// Generates a Description string of this pose.
/// \param indent The indentation to use when generating the string. 
function String GeometryStack.getDesc(String indent, Boolean includeGeometries) {
  String desc;
  desc += indent + "GeometryStack { \n";
  desc += indent + "  geomOperators:[ \n";
  for(Integer i=0; i<this.geomOperators.size; i++){
    desc += this.geomOperators[i].getDesc(indent+'  ') + "\n";
  }
  desc += indent + "  ],\n";
  if(includeGeometries){
    desc += indent + "  geometries:[ \n";
    for(Integer i=0; i<this.geomSet.size; i++){
      desc += indent + "      " + this.geomSet.get(i).getDesc(false, false) + "\n";
    }
    desc += indent + "  ]\n";
  }
  else{
    desc += indent + "  numGeometries:" + this.geomSet.size + "\n";
  }
  desc += indent + "}";
  return desc;
}

/// Generates a Description string of this Pose.
function String GeometryStack.getDesc() {
  return this.getDesc("", false);
}
