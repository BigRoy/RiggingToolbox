/*
 *  Copyright 2010-2014 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;

object Notifier {
  Listener listeners[];
};

function Notifier.addListener!(Listener listener){
  // TODO: make this method threadsafe. 
  for(Integer i=0; i<this.listeners.size; i++){
    if(this.listeners[i] === listener)
      return;
  }
  this.listeners.push(listener);
}

function Notifier.removeListener!(Listener listener){
  // TODO: make this method threadsafe. 
  for(Integer i=0; i<this.listeners.size; i++){
    if(this.listeners[i] === listener){
      for(Integer j=i; i<this.listeners.size-1; i++){
        this.listeners[j] = this.listeners[j+1];
      }
      this.listeners.resize(this.listeners.size-1);
      break;
    }
  }
}


function Notifier.notify(String type, String data){
  for(Integer i=0; i<this.listeners.size; i++){
    // Cast the listener to an non-const value.
    Ref<Listener> listener = this.listeners[i];
    listener.notify(this, type, data);
  }
}

