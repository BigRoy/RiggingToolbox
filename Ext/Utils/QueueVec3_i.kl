

require Math;
require Containers;

struct QueueVec3_iElement
{
	Vec3_i data;
	UInt32 next;
};

struct QueueVec3_i
{
    UInt32 front;
    UInt32 rear;
    /// \internal
    QueueVec3_iElement array[];
    /// \internal
    IndexPool indexPool;
};

/// \internal
function QueueVec3_i()
{
    // Reserve entry 0 as NULL
	UInt32 dummy;
	this.array.resize(1);
  	//this.array[0].index = InvalidIndex;
  	this.indexPool.getFreeIndex(dummy);

    this.front = 0;
    this.rear = 0;
}

// Add an element at the end of the queue
function QueueVec3_i.enqueue!(Vec3_i value)
{
  // Get a new key to fill
  UInt32 key;
  Boolean needsExpand = this.indexPool.getFreeIndex( key );
  if (needsExpand)
     this.array.resize( key+1 );

  // If this is the first valid value set it as front.
  if (this.front == 0)
  	this.front = key;

  // Store the new key on on the old rear element
  this.array[this.rear].next = key;

  // Set the value on the new QueueElement
  this.array[key].data = value;
  this.rear = key;
}

// Return the front value
function Vec3_i QueueVec3_i.front()
{
	if (this.isEmpty())
		throw("Queue is empty");

	return this.array[this.front].data;
}

// Remove element at the front of the queue
function QueueVec3_i.dequeue!()
{
	if (this.isEmpty())
		throw("Queue is empty");

	UInt32 tmp = this.front;
	this.front = this.array[this.front].next;
	this.indexPool.unusedIndex(tmp);
}

// Hard clear this queue
/// \internal
function QueueVec3_i.reset!()
{
	// Use only for debugging
	this.indexPool.reset();
	this.front = 0;
	this.rear = 0;

	// Reserve entry 0 as NULL
	UInt32 dummy;
	this.array.resize(1);
  	//this.array[0].index = InvalidIndex;
  	this.indexPool.getFreeIndex(dummy);
}

function Boolean QueueVec3_i.isEmpty()
{
    return (this.front == 0);
}

operator entry() {
  Queue q();

  report(q);

  Vec3_i v1(0, 0, 1);
  Vec3_i v2(0, 0, 2);
  Vec3_i v3(0, 0, 3);
  Vec3_i v4(0, 0, 4);
  Vec3_i v5(0, 0, 5);
  Vec3_i v6(0, 0, 6);

  q.enqueue(v1);
  q.enqueue(v2);
  q.enqueue(v3);

  report(q);
  report(q.front());
  report(q.dequeue());
  report(q.front());
  report(q.dequeue());

  q.enqueue(v4);
  q.enqueue(v5);
  q.enqueue(v6);

  report(q.front());
  report(q.dequeue());
  report(q.front());
  report(q.dequeue());
  report(q.front());
  report(q.dequeue());
  report(q.front());
  report(q.dequeue());

  q.enqueue(v4);
  q.enqueue(v5);
  report(q.front());
  report(q.front());
  report(q.dequeue());
  report(q.front());
  report(q.dequeue());


}
