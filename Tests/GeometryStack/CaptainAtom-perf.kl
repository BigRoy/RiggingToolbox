
require RiggingToolbox;

operator entry(){

  StartFabricProfiling();
  EvalContext context();

  GeometryStack skinningStack();
  skinningStack.loadJSONFile("${FABRIC_RIGGINGTOOLBOX_PATH}/Tests/GeometryStack/Resources/CaptainAtom_Skinning.json");

  GeometryStack wrapStack();
  wrapStack.loadJSONFile("${FABRIC_RIGGINGTOOLBOX_PATH}/Tests/GeometryStack/Resources/CaptainAtom_Wrapped.json");

  WrapModifier wrapModifier = wrapStack.getGeometryOperator(1);
  wrapModifier.setSourceGeomStack(skinningStack);

  SkinningModifier skiningModifier = skinningStack.getGeometryOperator(1);

  wrapStack.evaluate(context);

  UInt64 start = getCurrentTicks();
  UInt32 frames = 100;
  for (Index j=0; j<frames; j++)
  {
    UInt64 startFrame = getCurrentTicks();
    Scalar s = mathRandomScalar(0, j);
    // Modify the pose and then reevaluate. 
    Mat44 pose[];
    pose.resize(106);
    for(UInt32 i=0; i<106; i++){
      pose[i] = Xfo(Vec3(i, s, s)).toMat44();
    }
    skiningModifier.setPose(pose);
    wrapStack.evaluate(context);
    UInt64 endFrame = getCurrentTicks();
    Float64 frameTime = getSecondsBetweenTicks(startFrame, endFrame);
    report('FRAME: '+frameTime);
  }
  UInt64 end = getCurrentTicks();
  Float64 time = getSecondsBetweenTicks(start, end);
  report('TOTAL: '+time);
  Float64 fps = frames / time;
  report('FPS: '+fps);

  StopFabricProfiling();

  //report( GetEvalPathReport() );

  //report("skinningStack:" + skinningStack.getDesc('', false));
  // report("wrapStack:" + wrapStack.getDesc());
  
}

